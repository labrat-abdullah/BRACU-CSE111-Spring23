# -*- coding: utf-8 -*-
"""LAB-6(Classwork).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-_FFMEjmFtevlLLYeQzsqBOI-snOplfK
"""

#task1
class NikeBangladesh:
  products = {'Air Jordan': 0, 'Cortez': 0, 'Zoom Kobe': 0}
  sold = 0
  branches = []
  def __init__(self,location):
    self.location = location
    self.nikes = {'Air Jordan': 0, 'Cortez': 0, 'Zoom Kobe': 0}
    self.sell = 0
    NikeBangladesh.branches.append(location)
  @staticmethod
  def status():
    print(f"NikeBangladesh status: ")
    print(f"Branches Opened: {NikeBangladesh.branches}\nCurrently stocked\n{NikeBangladesh.products}\nSold:{NikeBangladesh.sold}")
  def details(self):
    print(f"Nike {self.location} outlet:")
    print(f"Products currently stocked: {self.nikes}\nSold: {self.sell}")
  def restockProducts(self,products):
    for i,j in products.items():
      if i in NikeBangladesh.products:
        NikeBangladesh.products[i] += j
      else:
        NikeBangladesh.products[i] = j

      if i in self.nikes:
        self.nikes[i] += j
      else:
        self.nikes[i] = j
  def productSold(self,products):
    for i,j in products.items():
      if self.nikes[i] >= j:
        self.nikes[i] -= j
        NikeBangladesh.products[i] -= j
        self.sell += j
      else:
        pass
    NikeBangladesh.sold += self.sell

print("xxxxxxxxxxxxxx1xxxxxxxxxxxxxxxx")
NikeBangladesh.status()
dhaka = NikeBangladesh("Dhaka Banani")
chittagong = NikeBangladesh("Chittagong GEC")
print("xxxxxxxxxxxxxx2xxxxxxxxxxxxxxxx")
dhaka.details()
print("xxxxxxxxxxxxxx3xxxxxxxxxxxxxxxx")
chittagong.details()
print("xxxxxxxxxxxxxx4xxxxxxxxxxxxxxxx")
dhaka.restockProducts({"Air Jordan":1200,"Cortez":200,"Zoom Kobe":200})
chittagong.restockProducts({"Air Jordan":1000,"Cortez":250,"Zoom Kobe":100})
print("xxxxxxxxxxxxxx5xxxxxxxxxxxxxxxx")
NikeBangladesh.status()
print("xxxxxxxxxxxxxx6xxxxxxxxxxxxxxxx")
dhaka.productSold({"Air Jordan":760,"Cortez":90})
chittagong.productSold({"Air Jordan":520,"Zoom Kobe":70})
print("xxxxxxxxxxxxxx7xxxxxxxxxxxxxxxx")
NikeBangladesh.status()

# Task 2
class Question:
    def __init__(self, text: str, choices: list, correct_choice: int):
        # Initialize three instance variables
        # text(type str), choices(type list), correct_choice(type int)
        self.text = text
        self.choices = choices
        self.correct_choice = correct_choice


class Quiz:
    # Initialize a static variable for counting the number of Quizzes
    total_quizzes = 0
    # or, to count the number of Quiz class objects

    def __init__(self, quiz_name):
      # Initialize instance variable name (type str)
      # Initialize instance variable question (type list)
      # Initialize instance variable score (type int)
      self.name = quiz_name
      self.questions = []
      self.score = 0
      Quiz.total_quizzes += 1

    def add_question(self, *questions):
      # Append the question objects in the question list
      for i in questions :
        self.questions.append(i)

    @classmethod
    def create_from_data(cls, quiz_name, question_data_list):
      # Firstly, make a Quiz class object by passing the quiz_name parameter in the constructor
      quiz = cls(quiz_name)
      # From the question_data_list extract the Question data
      question_data = []
      for i in question_data_list:
        data = []
        for j,k in i.items():
          data.append(k)
        question_data.append(data)
      # After that, make the Question class objects passing the extracted data in the constructor
      for i in question_data:
        quiz.add_question(Question(i[0],i[1],i[-1]))
      # Append those in the question list of the Quiz class object
      # Finally, return the Quiz class object
      return quiz



    def attempt(self):
      '''
      Sample printing format for attempt method.
      let's say we are calling quiz1.attempt() from the driver code.
      output:

      --- Math Quiz ---
      What is the result of 2 + 2?
      1. 3
      2. 4
      3. 5
      Your answer (enter the choice number): 2
      Correct answer! 1 point for you.
      What is the result of 3 * 6?
      1. 15
      2. 18
      3. 20
      Your answer (enter the choice number): 1
      Wrong answer!
      Your total score: 1/2
      '''
      print(f"--- {self.name} ---")

      for question in self.questions:
        print(f"{question.text}") # will print the question as shown in the output.
        for index in range(len(question.choices)):# this loop will print the choices as shown in the output.
            print(f"{index+1}. {question.choices[index]}")

        user_choice = int(input("Your answer (enter the choice number): ")) # takes the choice number from the user

        if user_choice == question.correct_choice: # calculate the quiz score
            self.score += 1
            print("Correct answer! 1 point for you.")
        else:
          print("Wrong answer!")
      print(f"Your total score: {self.score}/{len(self.questions)}") # total score gained in a quiz

# Test the Quiz Maker

# We are creating a Quiz object for the Math Quiz
quiz1 = Quiz("Math Quiz")
# Now creating two quiz question objects
# The Question class constructor takes three parameters: (Question, choices, correct answer)
# The correct answer is given as (list_index + 1)
quiz1_question1 = Question("What is the result of 2 + 2?", ["3", "4", "5"], 2)
quiz1_question2 = Question("What is the result of 3 * 6?", ["15", "18", "20"], 2)
# Adding the question objects to a question list of the Quiz class
quiz1.add_question(quiz1_question1, quiz1_question2)
# We will use this list of dictionaries to prepare the python quiz questions
python_quiz_data = [
    {
        'text': "What is the keyword to define a function in Python?",
        'choices': ["func", "def", "function"],
        'correct_choice': 2
    },
    {
        'text': "Which one is NOT a built-in data type in Python?",
        'choices': ["int", "str", "double"],
        'correct_choice': 3
    }
]
# Create another Quiz class object for the python quiz
quiz2 = Quiz.create_from_data("Python Quiz", python_quiz_data)
# Accessing static variable using the class name
print("Total no. of quizzes: ", Quiz.total_quizzes)
# Attempt Math Quiz
quiz1.attempt()
# Attempt Python Quiz
quiz2.attempt()

#task 3
class Foodiz:
  branches = {}
  total_revenue = 0
  total_branch = 0
  def __init__(self,location):
    self.location = location
    self.sell = 0
    Foodiz.total_branch += 1
    #Foodiz.branches[self.location] = 0
  def sellQuantity(self,quantity):
    self.sell += quantity * 300
    Foodiz.total_revenue += self.sell
    Foodiz.branches[self.location] = self.sell
  def branchInformation(self):
    print(f"Branch Name: {self.location} \nBranch Sell: {self.sell} Taka ")
  @staticmethod
  def details():
    print(f"Total Number of branch(s): {Foodiz.total_branch} \nTotal Sell: {Foodiz.total_revenue} Taka")
    for i,j in Foodiz.branches.items():
      print("########################")
      print(f"Branch Name: {i} \nBranch Sell: {j} Taka \nBranch consists of total sell's: {(j/Foodiz.total_revenue)*100}%")

Foodiz.details()
print('1----------------------------------')
mohakhali = Foodiz('Mohakhali')
mohakhali.sellQuantity(25)
mohakhali.branchInformation()
print('2----------------------------------')
Foodiz.details()
print('3========================')
banani = Foodiz('Banani')
banani.sellQuantity(15)
banani.branchInformation()
print('4----------------------------------')
Foodiz.details()
print('5========================')
gulshan = Foodiz('Gulshan')
gulshan.sellQuantity(9)
gulshan.branchInformation()
print('6----------------------------------')
Foodiz.details()