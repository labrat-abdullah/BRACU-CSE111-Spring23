# -*- coding: utf-8 -*-
"""Lab-07: Homework OOP Inheritance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_PR2UhEiZ2Ysf_ykPQWz94USfngPi3YL
"""

class Employee:
  employee_count = {}
  programmers = 0
  hrs = 0
  def __init__(self,join,exp,work_hour = 40):
    self.join = join
    self.exp = exp
    #self.work_hour = work_hour
    self.work_hour = work_hour
  @classmethod
  def showDetails(cls):
    print("Company workforce:")
    print(f"Total Employee/s: {Employee.programmers+Employee.hrs}")
    for i,j in cls.employee_count.items():
      print(f"Total {i} employee/s: {j}")

class Programmer(Employee):
  designation_list = [ "Junior Software Engineer", "Software Engineer", "Senior Software Engineer", "Technical Lead" ]
  def __init__(self,name,join,exp,work_hour = 40):
    super().__init__(join,exp,work_hour)
    self.name = name
    if self.exp < 3 and self.exp >= 0:
      self.designation = Programmer.designation_list[0]
    elif self.exp >= 3 and self.exp < 5:
      self.designation = Programmer.designation_list[1]
    elif self.exp >= 5 and self.exp < 8:
      self.designation = Programmer.designation_list[2]
    else:
      self.designation = Programmer.designation_list[-1]
    self.salary = 0
    Employee.programmers += 1
    Employee.employee_count["Programmer"] = Employee.programmers
    self.id = self.createProgrammerID()

  def showProgrammerDetails(self):
    date = self.join.split("-")
    date = "-".join(date)
    print(f"Programmer Employee:\nName: {self.name}\nID: {self.id}\nJoining Date: {date}\nDesignation: {self.designation}\nSalary: BDT {self.salary}")
  def calculateSalary(self):
    salary = {"Junior Software Engineer":30000,"Software Engineer": 45000,"Senior Software Engineer": 70000,"Technical Lead": 120000}
    if self.work_hour < 40:
      print(f"{self.name} can not work for {self.work_hour} hours.")
    self.salary = salary[self.designation]
    year = 2023 - int(self.join.split("-")[0])
    for i in range(year):
      self.salary += self.salary * .15
  def calculateOvertime(self):
    if self.work_hour >= 40 and self.work_hour <= 60:
      self.salary += (self.work_hour - 40) * 500
      print(f"{self.name} will get BDT {4*((self.work_hour - 40) * 500)} overtime.")
    elif self.work_hour < 0 and self.work_hour > 60:
      print("Invalid or exceed time of work")
    else:
      print(f"{self.name} will not get overtime.")
  def createProgrammerID(self):
    year = self.join.split("-")
    id = f"P-{year[0][2:]}{year[1]}{year[-1]}-{Employee.programmers+Employee.hrs}"
    return id

class HR(Employee):
  def __init__(self,name,join,exp,work_hour = 40):
    super().__init__(join,exp,work_hour)
    self.name = name
    Employee.hrs += 1
    Employee.employee_count["HR"] = Employee.hrs
    self.id = self.createHREmployeeID()
  def showHREmployeeDeatails(self):
    date = self.join.split("-")
    date = "-".join(date)
    print(f"HR Employee:\nName: {self.name}\nID: {self.id}\nJoining Date: {date}")
  def createHREmployeeID(self):
    year = self.join.split("-")
    id = f"HR-{year[0][2:]}{year[1]}{year[-1]}-{Employee.programmers+Employee.hrs}"
    return id

class InternProgrammer(Programmer):
  intern_count = 0
  def __init__(self,name,join,intern_type = "Unpaid"):
    #super().__init__(name,join,0)
    self.name = name
    self.join = join
    self.intern_type = intern_type
    self.work_experience = 0
    self.weekly_work_hour = 40
    InternProgrammer.intern_count += 1
    self.temp_id = "Temp_"+str(InternProgrammer.intern_count)
    eligible = 8-int(self.join.split("-")[1][-1])
    if eligible >= 4:
      self.status = True
    else:
      self.status = False
  def showInternDetails(self):
    if self.status is True:
      txt = "Eligible for promotion"
    else:
      txt = "Not Eligible for promotion"
    print(f"Intern (Programmer):\nName: {self.name}\nID: {self.temp_id}\nJoining Date: {self.join}\nType: {self.intern_type}\nStatus: {txt}")
  def promoteToProgrammer(self):
    if self.status == False:
      print(f"{self.name} can not be promoted")
    else:
      print(f"{self.name} is promoted")
      return Programmer(self.name,"2023-08-20",self.work_experience,self.weekly_work_hour)

Employee.showDetails()
print("=========1=========")
richard = Programmer("Richard Hendricks", "2021-06-08", 4, 48)
richard.calculateSalary()
print("=========2=========")
richard.showProgrammerDetails()
print("=========3=========")
richard.calculateOvertime()
print("=========4=========")
richard.showProgrammerDetails()
print("=========5=========")
monica = HR("Monica Hall", "2022-07-06", 2, 40)
print("=========6=========")
monica.showHREmployeeDeatails()
print("=========7=========")
Employee.showDetails()
print("=========8=========")
gilfoyle = Programmer("Bertram Gilfoyle", "2020-03-02", 6, 35)
gilfoyle.calculateSalary()
print("=========9=========")
gilfoyle.calculateOvertime()
print("=========10=========")
gilfoyle.showProgrammerDetails()
print("=========11=========")
gavin = Programmer("Gavin Belson", "2016-12-20", 9)
gavin.calculateSalary()
gavin.calculateOvertime()
gavin.showProgrammerDetails()
print("=========12=========")
yang = InternProgrammer("Jian Yang", "2023-01-01")
yang.showInternDetails()
print("=========13=========")
jared = InternProgrammer("Jared Dunn", "2023-06-05", "Paid")
jared.showInternDetails()
print("=========14=========")
jared = jared.promoteToProgrammer()
print("=========15=========")
Employee.showDetails()
print("=========16=========")
yang = yang.promoteToProgrammer()
yang.calculateSalary()
yang.showProgrammerDetails()
print("=========17=========")
Employee.showDetails()