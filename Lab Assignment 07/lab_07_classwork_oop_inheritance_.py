# -*- coding: utf-8 -*-
"""Lab-07: Classwork OOP Inheritance .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y-N-GbVOYMJmWnqyUXqDZ3bEHfjGKE0Z
"""

#task1
##Parent class##
class KK_tea:
  sales = {'KK Regular Tea' : 0}
  def __init__(self,price = 0,bags = 50):
    self.price = price
    self.tea_bags = bags
    self.status = False
    self.name = "KK Regular Tea"
  def product_detail(self):
    print(f"Name: {self.name}, Weight: {self.tea_bags*2}\nTea Bags: {self.tea_bags}, Price: {self.price}\nStatus: {self.status}")
  @staticmethod
  def update_sold_status_regular(*sold):
    for i in sold:
      i.status = True
      KK_tea.sales['KK Regular Tea'] += 1
  @staticmethod
  def total_sales():
    print(KK_tea.sales)
##Child classes##
class KK_flavoured_tea(KK_tea):
  #flavoured_sales = {}
  def __init__(self,name,price,bags):
    super().__init__(price,bags)
    self.name = name
  def product_detail(self):
    return super().product_detail()
  @staticmethod
  def update_sold_status_flavoured(*sold):
    for i in sold:
      i.status = True
      if i.name not in KK_tea.sales:
        KK_tea.sales[i.name] = 1
      else:
        KK_tea.sales[i.name] += 1
t1 = KK_tea(250)
print("-----------------1-----------------")
t1.product_detail()
print("-----------------2-----------------")
KK_tea.total_sales()
print("-----------------3-----------------")
t2 = KK_tea(470, 100)
t3 = KK_tea(360, 75)
KK_tea.update_sold_status_regular(t1, t2, t3)
print("-----------------4-----------------")
t3.product_detail()
print("-----------------5-----------------")
KK_tea.total_sales()
print("-----------------6-----------------")
t4 = KK_flavoured_tea("Jasmine", 260, 50)
t5 = KK_flavoured_tea("Honey Lemon", 270, 45)
t6 = KK_flavoured_tea("Honey Lemon", 270, 45)
print("-----------------7-----------------")
t4.product_detail()
print("-----------------8-----------------")
t6.product_detail()
print("-----------------9-----------------")
KK_flavoured_tea.update_sold_status_flavoured(t4, t5, t6)
print("-----------------10-----------------")
KK_tea.total_sales()

#task2
#parent class
class TwoDVector:
  def __init__(self, x, y):
    self.__x = x
    self.__y = y
  # Setter and Getter Methods for x & y
  def setX(self,x):
    self.__x = x
  def getX(self):
    return self.__x
  def setY(self,y):
    self.__y = y
  def getY(self):
    return self.__y
  def add2DVectors(self, *vectors):
    for i in vectors:
      self.__x += i.__x
      self.__y += i.__y
  def print2DVector(self):
    if self.__y >= 0:
      y = "+ "+str(self.__y)
    else:
      y = str(self.__y)
    print(f"{self.__x}i {y}j")

class ThreeDVector(TwoDVector):
  def __init__(self,x,y,z):
    super().__init__(x,y)
    self.__z = z
  def getZ(self):
    return self.__z
  def setZ(self,z):
    self.__z = z
  def add3DVectors(self,*vectors):
    for i in vectors:
      super().add2DVectors(i)
      self.__z += i.getZ()
  def print3DVector(self):
    if self.getY() >= 0:
      y = "+ "+str(self.getY())
    else:
      y = str(self.getY())
    if self.__z > 0:
      z = "+ "+str(self.__z)
    else:
      z =str(self.__z)
    print(f"{self.getX()}i {y}j {z}k")
  def multiplyScalar(self,num):
    self.setX(self.getX()*num)
    self.setY(self.getY()*num)
    self.setZ(self.getZ()*num)
  def calculateLength(self):
    return (self.getX()**2+self.getY()**2+self.getZ()**2)**.5
TwoDV1 = TwoDVector(5, 6)
TwoDV2 = TwoDVector(3, 7)
TwoDV3 = TwoDVector(1, 8)
print("===============")
TwoDV1.add2DVectors(TwoDV2, TwoDV3)
TwoDV1.print2DVector()
print("===============")
ThreeDV1 = ThreeDVector(5, 6, 1)
ThreeDV2 = ThreeDVector(1, 9, -7)
ThreeDV3 = ThreeDVector(8, 2, 4)
print("===============")
ThreeDV1.add3DVectors(ThreeDV2,ThreeDV3)
ThreeDV1.print3DVector()
print("===============")
ThreeDV1.multiplyScalar(3)
ThreeDV1.print3DVector()
print("===============")
print(ThreeDV1.calculateLength())

class File:
  files_directory = []
  def __init__(self,name,size,date_of_creation):
    self.name = name
    self.size = size
    self.date_of_creation = date_of_creation
    self.description = ""
    File.files_directory.append(self)
  def renameFile(self,name):
    self.name = name
  def updateDescription(self,text):
    self.description = text
  def previewFile(self):
    print(f"Name of file: {self.name}")
    print(f"Description: {self.description}")
    print(f"Size: {self.size}")
    print(f"Date created: {self.date_of_creation}")
  @classmethod
  def previewAllFiles(cls):
    for i in cls.files_directory:
      i.previewFile()

class Audio(File):
  def __init__(self,name,size,date_of_creation,duration,lyrics = None):
    super().__init__(name,size,date_of_creation)
    self.duration = duration
    self.lyrics = lyrics
  def playAudio(self):
    if self.lyrics == None:
      print(f"Playing Audio file now for {self.duration} (no lyric available).")
    else:
      print(f"Playing Audio file now for {self.duration}: (Lyric is given below):")
      for i,j in self.lyrics.items():
        print(f"{i} : {j}")

class Image(File):
  def __init__(self,name,size,date_of_creation,dimension):
    super().__init__(name,size,date_of_creation)
    self.height = int(dimension.split("x")[1])
    self.width = int(dimension.split("x")[0])
  def displayPicture(self):
    for i in range(self.width):
      for j in range(self.height):
        print("*",end="")
      print(" ")

print("----------1----------")
text_file = File("New file", "2 MB", "19 July 2020")
binary_file = File("Bin", "100 Kb", "20 August 2021")
print("----------2----------")
text_file.previewFile()
print("----------3----------")
audio_file1 = Audio("Class recording", "258 MB", "13th february 2023", "2 hours")
print("----------4----------")
audio_file1.updateDescription("Contains recordings of the CSE dept CSE111 Class")
print("----------5----------")
audio_file1.previewFile()
print("----------6----------")
audio_file1.playAudio()
print("----------7----------")

lyric = {'0:00-0:05':"I have been reading books of old",
         '0:06-0:10': "The legends and the myths",
         '0:11-0:15':"Achilles and his gold",
         '0:16-0:20':"Hercules and his gifts",
         '0:21-0:25':"Spider Man's control" ,
         '0:26-0:30':"And Batman with his fists",
         '0:31-0:35':"And clearly I don't see myself upon that list"}

print("----------8----------")
audio_file2 = Audio("The squeeze podcast", "200 MB", "17th July 2023", "35 seconds", lyric)
print("----------9----------")
audio_file2.playAudio()
print("----------10----------")
image_file1 = Image("name", "2MB", "31st July", "10x5")
print("----------11----------")
image_file1.displayPicture()
print("----------12----------")
Image.previewAllFiles()